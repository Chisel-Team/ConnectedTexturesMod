plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'org.ajoberstar.grgit.service' version '5.2.2'
    id 'net.neoforged.gradle.userdev' version '7.0.96'//https://projects.neoforged.net/neoforged/neogradle
    id 'io.freefair.lombok' version '8.6'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.6'
}

project.ext.gitHash = grgitService.service.get().grgit.log().find().abbreviatedId

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE') == 'false'

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : project.ext.gitHash

version = "${minecraft_version}-${mod_version}+" + project.buildnumber
group = "team.chisel.ctm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = dev ? "CTM_DEV" : "CTM"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers {
    file(file('src/main/resources/META-INF/accesstransformer.cfg'))
}

runs {
    configureEach { net.neoforged.gradle.dsl.common.runs.run.Run run ->
        run.workingDirectory(file("run"))

        run.modSources(sourceSets.main, sourceSets.test)

        // Recommended logging level for the console
        run.systemProperty('forge.logging.console.level', 'debug')
    }
    client {
    }
    server {
    }
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes(["Specification-Title": "ctm",
                    "Specification-Vendor": "chisel-team",
                    "Specification-Version": "25.0",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"chisel-team",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    ])
    }
}

repositories {
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${forge_version}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

test {
	useJUnitPlatform()
	maxHeapSize = '1G'
	testLogging {
		events "passed"
	}
}

lombok {
    version = "1.18.30"
}

// Create API jar with sources and compiled files
tasks.register('apiJar', Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("api")
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'team/chisel/ctm/api/**/*'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("mavenJava", MavenPublication) { MavenPublication publication ->
            publication.artifactId = 'CTM'
            publication.artifacts = [jar, apiJar]
            //artifact sourceJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url project.property('mavendir') }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "CTM ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>")
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>")
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')
    
curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.property('curseforge_key')
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG') == 'none' ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        mainArtifact(jar) {
            displayName = "CTM - ${version}"
        }
        addGameVersion project.minecraft_version
    }
}
